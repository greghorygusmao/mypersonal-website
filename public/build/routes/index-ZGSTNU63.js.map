{
  "version": 3,
  "sources": ["browser-route-module:/home/tharyckgusmao/Documentos/tharyck/Projetos/remix/treelodot8/app/routes/index.jsx?browser", "../../../app/routes/index.jsx", "../../../app/components/ColumnCards/ColumnCards.jsx", "../../../app/components/BaseKit/BaseText/BaseText.js", "../../../app/components/BaseKit/Divider/Divider.js", "../../../app/components/BaseKit/Icon/Icon.js", "../../../app/components/Navigation/LeftNavbar/LeftNavbar.jsx", "../../../app/components/Navigation/LinkNavigation/LinkNavigation.jsx"],
  "sourcesContent": ["export { default, links } from \"/home/tharyckgusmao/Documentos/tharyck/Projetos/remix/treelodot8/app/routes/index.jsx\";", "import { useLoaderData } from \"remix\"\nimport Box from \"~/components/BaseKit/Box/Box\"\nimport { ColumnCards, links as ColumnCardsLinks } from \"~/components/ColumnCards/ColumnCards\"\nimport { LeftNavbar, links as LeftNavbarlinks } from \"~/components/Navigation/LeftNavbar/LeftNavbar\"\nimport { Title, links as TitleLinks } from \"~/components/Title/Title\"\nimport { getCardsOnBoard, getListsOnBoard, getMembersOnBoard } from \"~/services/trello\"\nimport { members } from \"../services/trellotypes\"\nimport { authenticator } from \"~/services/auth\"\n\nexport function links() {\n  return [...LeftNavbarlinks, ...TitleLinks, ...ColumnCardsLinks]\n}\n\nconst factorSearch = (data, factor) => {\n  return data.labels.find((ee) => ee.name === factor)\n}\nconst extractDeadLine = (data) => {\n  return (\n    data\n      ?.split(\"\\n\")\n      ?.find((e) => e?.indexOf(\"**PREVIS\u00C3O:**\") > -1)\n      ?.split(\"**PREVIS\u00C3O:**\")\n      ?.slice(1)?.[0]\n      ?.replace(\" \", \"\") || \"N\u00E3o Definido\"\n  )\n}\nconst extractCreatedAt = (data) => {\n  return (\n    data\n      ?.split(\"\\n\")\n      ?.find((e) => e?.indexOf(\"**DATA DE CRIA\u00C7\u00C3O:**\") > -1)\n      ?.split(\"**DATA DE CRIA\u00C7\u00C3O:**\")\n      ?.slice(1)?.[0]\n      ?.replace(\" \", \"\") || \"N\u00E3o Definido\"\n  )\n}\n\nconst formatData = (data, labels) => {\n  let e = data\n  e.priority = e.labels.find((ee) => {\n    return [\"M\u00C9DIA\", \"ALTA\", \"BAIXA\"].findIndex((e) => e === ee.name) > -1\n  })?.name\n\n  e.priorityOrder = 3\n\n  if (e.priority === \"ALTA\") {\n    e.priorityOrder = 0\n  } else if (e.priority === \"M\u00C9DIA\") {\n    e.priorityOrder = 1\n  } else {\n    e.priorityOrder = 2\n  }\n\n  e.labels = labels\n  e.members = e.idMembers.map((e) => {\n    return members.find((ee) => ee.idMember === e)\n  })\n  e.dateDeadLine = extractDeadLine(e.desc)\n  e.createdAt = extractCreatedAt(e.desc)\n\n  e.show = true\n\n  if (e.dateDeadLine === \"N\u00E3o Definido\" || e.createdAt === \"N\u00E3o Definido\") {\n    e.show = false\n  }\n  return e\n}\n\nexport let loader = async ({ request }) => {\n  await authenticator.isAuthenticated(request, {\n    failureRedirect: \"/logar\",\n  })\n\n  let cards = await getCardsOnBoard()\n  let boards = await getListsOnBoard()\n  // let members = await getMembersOnBoard();\n\n  let group = [\n    {\n      title: \"IMPLEMENTA\u00C7\u00C3O\",\n      data: { finish: [], process: [] },\n      emoji: \"\uD83D\uDCA1\",\n    },\n    {\n      title: \"CORRE\u00C7\u00D5ES\",\n      data: { finish: [], process: [] },\n      emoji: \"\uD83D\uDEA8\",\n    },\n  ]\n\n  let trashColumn = boards.find((e) => e.name != \"DESCARTADOS\" || e.name != \"BACKLOG ANTIGO\")\n  let data = cards.filter((e) => e.idList != trashColumn.id)\n\n  data.forEach((e) => {\n    let labels = e.labels.filter((e) => [\"IMPLEMENTA\u00C7\u00C3O\", \"CORRE\u00C7\u00C3O\"].indexOf(e.name) <= -1)\n\n    if (factorSearch(e, \"IMPLEMENTA\u00C7\u00C3O\")) {\n      e = formatData(e, labels)\n      if (e.show) {\n         if (e.dueComplete) {\n           group[0].data.finish.push(e)\n         } else if (e.start) {\n           group[0].data.process.push(e)\n         }\n        \n      }\n    } else if (factorSearch(e, \"CORRE\u00C7\u00C3O\")) {\n      e = formatData(e, labels)\n\n      if (e.show) {\n        if (e.dueComplete) {\n          group[1].data.finish.push(e)\n        } else if (e.start) {\n          group[1].data.process.push(e)\n        }\n        \n      }\n    }\n  })\n  const currentDate = new Date()\n  const nextMonth = new Date(currentDate.setMonth(currentDate.getMonth() + 1))\n\n  const currentMontFormatted = new Intl.DateTimeFormat(\"pt-BR\", {\n    month: \"long\",\n  }).format(new Date())\n\n  const nextMonthFormatted = new Intl.DateTimeFormat(\"pt-BR\", {\n    month: \"long\",\n  }).format(nextMonth)\n\n  return { data: group, currentMontFormatted, nextMonthFormatted }\n}\n\nexport default function Index() {\n  let { data, currentMontFormatted, nextMonthFormatted } = useLoaderData()\n\n  return (\n    <div\n      style={{\n        flexDirection: \"row\",\n        display: \"flex\",\n        height: \"100%\",\n      }}\n    >\n      <LeftNavbar />\n      <Box\n        flexDirection=\"column\"\n        style={{\n          padding: \"30px\",\n          marginLeft: \"80px\",\n        }}\n      >\n        <Title\n          style={{\n            marginBottom: \"24px\",\n          }}\n          title={\n            <>\n              Backlog Desenvolvimento\n              <span style={{ color: \"#EBEBED\" }}> \u2022 </span>\n              <span\n                style={{\n                  color: \"#7F7EFF\",\n                  textTransform: \"uppercase\",\n                }}\n              >\n                {currentMontFormatted}/{nextMonthFormatted}\n              </span>\n            </>\n          }\n        ></Title>\n        <Box flexDirection=\"row\">\n          {data?.map((e) => {\n            return (\n              <ColumnCards\n                data={e}\n                key={Math.random()}\n                style={{\n                  marginRight: \"30px\",\n                  alignSelf: \"baseline\",\n                }}\n              />\n            )\n          })}\n        </Box>\n      </Box>\n    </div>\n  )\n}\n", "import { useMemo } from \"react\"\nimport BaseImage from \"../BaseKit/BaseImage/BaseImage\"\nimport BaseText from \"../BaseKit/BaseText/BaseText\"\nimport Box from \"../BaseKit/Box/Box\"\nimport Divider from \"../BaseKit/Divider/Divider\"\nimport Icon from \"../BaseKit/Icon/Icon\"\nimport s from \"./styles.css\"\nexport const links = [{ rel: \"stylesheet\", href: s }]\n\nexport const Card = ({ data }) => {\n  const labels = useMemo(() => {\n    return data.labels.map((e, k) => {\n      let color = e.color.toLowerCase()\n      return (\n        <Box\n          className={\"typetask\"}\n          justifyContent=\"center\"\n          flexDirection=\"row\"\n          key={Math.random()}\n          style={{\n            backgroundColor: color == \"sky\" ? \"cornflowerblue\" : `${color}`,\n          }}\n        >\n          <BaseText className={\"typetask_inovao\"} type=\"span\" title={e.name}></BaseText>\n        </Box>\n      )\n    })\n  }, [])\n\n  return (\n    <Box className={\"card\"} flexDirection=\"row\">\n      <Box className={\"card_infocard\"} alignItems=\"center\" flexDirection=\"column\">\n        <Box className={\"card_header\"} flexDirection=\"column\">\n          <Box className={\"card_tags\"} flexDirection=\"row\" alignItems=\"center\" justifyContent=\"center\">\n            <Box flexDirection=\"row\" flex={1} alignItems=\"center\">\n              {labels}\n            </Box>\n            <Box flexDirection=\"row\">\n              {data.members.map((e, k) => {\n                return (\n                  <span\n                    style={{\n                      width: \"18px\",\n                      height: \"18px\",\n                      borderRadius: \"100px\",\n                      marginRight: \"5px\",\n                      overflow: \"hidden\",\n                    }}\n                    key={Math.random()}\n                    data-tip={e.name}\n                  >\n                    <BaseImage src={e.avatar} width=\"18px\" height=\"18px\" />\n                  </span>\n                )\n              })}\n            </Box>\n          </Box>\n\n          <BaseText\n            className={\"card_reconstruoregistrocorreodeponto\"}\n            type=\"span\"\n            title={data.name}\n          ></BaseText>\n        </Box>\n\n        <Box className={\"card_info\"} alignItems=\"center\" flexDirection=\"row\">\n          <Box className={\"card_deadline\"} alignItems=\"center\" flexDirection=\"row\">\n            <Icon name=\"icon-icon_calendar1\" />\n            <span data-tip={\"Previs\u00E3o\"}>\n              <BaseText className={\"card_\"} type=\"span\" title={data.dateDeadLine}></BaseText>\n            </span>\n          </Box>\n\n          <Box className={\"card_priority\"} alignItems=\"center\" flexDirection=\"row\">\n            <Icon name=\"icon-icon_alert\" />\n\n            <BaseText\n              className={\"card_baixa\"}\n              type=\"span\"\n              title={data.priority || \"N\u00E3o Informado\"}\n            ></BaseText>\n          </Box>\n\n          <a\n            href={data.url}\n            className={\"card_trello\"}           \n            target=\"_blank\"\n          >\n            <Icon name=\"icon-icon_trello\" />\n\n            <BaseText className={\"card_cardtrello\"} type=\"span\" title={\"Card Trello\"}></BaseText>\n          </a>\n        </Box>\n      </Box>\n    </Box>\n  )\n}\n\nexport const ColumnCards = ({ data, style }) => {\n  const dataFiltered = useMemo(() => {\n    let finish = []\n    let proccess = []\n\n    proccess = data?.data?.proccess?.sort((a, b) => {\n                return a.priorityOrder < b.priorityOrder\n              })?.map((e) => {\n                return <Card data={e} key={e.id}></Card>\n              })\n    finish =  data?.data?.finish?.sort((a, b) => {\n                return a.priorityOrder < b.priorityOrder\n              })?.map((e) => {\n                return <Card data={e} key={e.id}></Card>\n              })\n\n    return { finish, proccess }\n  }, [data])\n\n  return (\n    <Box className={\"inovation\"} style={style} flexDirection=\"column\">\n      <Box className={\"inovation_headerlist\"} flexDirection=\"row\">\n        <Box\n          className={\"inovation_title\"}\n          style={{\n            width: \"100%\",\n          }}\n          flexDirection=\"row\"\n        >\n          <BaseText className={\"inovation_inovao\"} type=\"span\" title={data.emoji}></BaseText>\n\n          <BaseText className={\"inovation_inovao\"} type=\"span\" title={data.title}></BaseText>\n        </Box>\n\n        <Box className={\"inovation_number\"} flexDirection=\"row\">\n          <BaseText\n            className={\"inovation_total\"}\n            type=\"span\"\n            title={data?.data?.finish.length + data?.data?.proccess.length}\n          ></BaseText>\n        </Box>\n      </Box>\n      <Divider type=\"h\" spaccing=\"0px\" style={{ backgroundColor: \"#EBEBED\" }}></Divider>\n\n      <Box className={\"inovation_ctn\"}>\n        <Box className={\"inovation_inprocess\"} flexDirection=\"column\">\n          <BaseText className={\"inovation_emprocesso\"} type=\"span\" title={\"EM PROCESSO\"}></BaseText>\n          <div>\n            {data?.data?.proccess}\n          </div>\n        </Box>\n\n        <Divider type=\"h\" spaccing=\"0px\" style={{ backgroundColor: \"#EBEBED\" }}></Divider>\n\n        <Box className={\"inovation_completed\"} flexDirection=\"column\">\n          <BaseText className={\"inovation_concluidos\"} type=\"span\" title={\"CONCLUIDOS\"}></BaseText>\n          <div>\n            {data?.data?.finish}\n          </div>\n        </Box>\n      </Box>\n    </Box>\n  )\n}\n", "import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst BaseText = ({\n  title,\n  children,\n  style,\n  className,\n  onClick,\n  type,\n  aria,\n  target,\n  href,\n}) => {\n  const CustomTag = `${type}`;\n  const hrefProp = type == 'a' ? { href, target } : null;\n  return (\n    <CustomTag\n      className={`${className || ''}`}\n      style={style}\n      title={aria}\n      {...hrefProp}\n      onClick={() => {\n        if (onClick) onClick();\n      }}\n    >\n      {title || children}\n    </CustomTag>\n  );\n};\n\nBaseText.propTypes = {\n  title: PropTypes.any,\n  aria: PropTypes.string,\n  children: PropTypes.node,\n  type: PropTypes.string,\n  style: PropTypes.object,\n};\n\nexport default BaseText;\n", "import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst Divider = ({ type, spaccing, variant, style, size = 1 }) => {\n\n  let dotted = {};\n\n  dotted =\n    variant == 'dotted'\n      ? {\n          backgroundimage: `-webkit-linear-gradient(right, rgba(255,255,255,1) 0%, rgba(255,255,255,1) 50%, rgba(255,255,255,0) 51%,rgba(255,255,255,0) 100%),\n                            -webkit-linear-gradient(bottom, rgba(128,128,128,1) 0%, rgba(128,128,128,0) 8%, rgba(128,128,128,0) 100%)`,\n          backgroundSize: '12px 24px',\n        }\n      : {};\n\n  return (\n    <div\n      style={{\n        margin: type == 'h' ? `${spaccing} 0px` : `0px ${spaccing}`,\n        minWidth: type == 'h' ? `100%` : `${size}px`,\n        minHeight: type == 'h' ? `${size}px` : `100%`,\n        ...dotted,\n        ...style,\n      }}\n    />\n  );\n};\n\nDivider.defaultProps = {\n  variant: 'solid',\n};\n\nDivider.propTypes = {\n  type: PropTypes.string,\n  spaccing: PropTypes.string,\n  variant: PropTypes.string,\n};\n\nexport default Divider;\n", "\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport style from './Icon.css';\nconsole.log(style);\n\nconst Icon = ({ style, name, className=\"\", onClick }) => {\n  return (\n    <i\n      className={`icon ${name} ${className||''}`}\n      onClick={e => {\n        if (onClick) {\n          onClick(e);\n        }\n      }}\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        ...style,\n      }}\n    />\n  );\n};\n\nIcon.propTypes = {\n  name: PropTypes.string,\n  className: PropTypes.string,\n  style: PropTypes.object,\n};\n\nexport default Icon;\n", "import logo from \"../../../assets/images/logo.svg\";\nimport BaseImage from \"../../BaseKit/BaseImage/BaseImage\";\nimport Box from \"../../BaseKit/Box/Box\";\nimport Divider from \"../../BaseKit/Divider/Divider\";\nimport { LinkNavigation, links as LinkNavigationStyles } from \"../LinkNavigation/LinkNavigation\";\nimport s from \"./styles.css\";\nexport const links = [\n  { rel: \"stylesheet\", href: s },\n  \n  ...LinkNavigationStyles,\n];\n\nexport const LeftNavbar = ({ props }) => {\n  return (\n    <Box\n      className={\"leftnavbar\"}\n\n      flexDirection=\"row\"\n      position=\"fixed\"\n    >\n      <Box\n        className={\"leftnavbar_ctn\"}\n        flex=\"1\"\n        alignItems=\"center\"\n        flexDirection=\"column\"\n      >\n        <Box\n          className={\"leftnavbar_ctn_nav\"}\n          flex=\"1\"\n          flexDirection=\"column\"\n        > \n\n          <BaseImage width=\"30px\" height=\"30px\" src={logo} style={{\n            minWidth:\"30px\",minHeight:\"30px\"}}/>\n          <Box\n            className={\"leftnavbar_ctn_links\"}\n            flex=\"1\"    \n              flexDirection=\"column\"\n          >\n            <LinkNavigation icon=\"icon-icon_code\"/>\n          </Box>\n        </Box>\n\n        {/* // <Icon  className={\"leftnavbar_icon_logout\"} /> */}\n      </Box>\n\n      <Divider\n        type=\"v\"\n        spaccing=\"0px\"\n        style={{ backgroundColor: \"#EBEBED\" }}\n      ></Divider>\n    </Box>\n  );\n};\n\nexport default LeftNavbar;", "import { Link } from \"remix\";\nimport Box from \"~/components/BaseKit/Box/Box\"\nimport Icon from \"~/components/BaseKit/Icon/Icon\"\nimport s from \"./styles.css\";\n\nexport const links = [{ rel: \"stylesheet\", href: s }];\n\nexport const LinkNavigation=({icon})=>{\n\n            \n\n            \n return (\n   <Link className={\"link_navbar\"} to=\"/\">\n     <Icon name={icon} />\n   </Link>\n );\n            \n}"],
  "mappings": "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",
  "names": []
}
