{
  "version": 3,
  "sources": ["../../../node_modules/frappe-gantt/dist/frappe-gantt.js", "browser-route-module:/home/tharyckgusmao/Documentos/tharyck/Projetos/remix/treelodot8/app/routes/index.jsx?browser", "../../../app/routes/index.jsx", "../../../app/components/ColumnCards/ColumnCards.jsx", "../../../app/components/BaseKit/BaseText/BaseText.js", "../../../app/components/BaseKit/Divider/Divider.js", "../../../app/components/BaseKit/Icon/Icon.js", "../../../app/components/Modal/ModalPortal.js", "../../../app/components/utils/portal.js", "../../../app/components/Navigation/LeftNavbar/LeftNavbar.jsx", "../../../app/components/Navigation/LinkNavigation/LinkNavigation.jsx"],
  "sourcesContent": ["var Gantt = (function () {\n'use strict';\n\nconst YEAR = 'year';\nconst MONTH = 'month';\nconst DAY = 'day';\nconst HOUR = 'hour';\nconst MINUTE = 'minute';\nconst SECOND = 'second';\nconst MILLISECOND = 'millisecond';\n\nconst month_names = {\n    en: [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December'\n    ],\n    es: [\n        'Enero',\n        'Febrero',\n        'Marzo',\n        'Abril',\n        'Mayo',\n        'Junio',\n        'Julio',\n        'Agosto',\n        'Septiembre',\n        'Octubre',\n        'Noviembre',\n        'Diciembre'\n    ],\n    ru: [\n        '\u042F\u043D\u0432\u0430\u0440\u044C',\n        '\u0424\u0435\u0432\u0440\u0430\u043B\u044C',\n        '\u041C\u0430\u0440\u0442',\n        '\u0410\u043F\u0440\u0435\u043B\u044C',\n        '\u041C\u0430\u0439',\n        '\u0418\u044E\u043D\u044C',\n        '\u0418\u044E\u043B\u044C',\n        '\u0410\u0432\u0433\u0443\u0441\u0442',\n        '\u0421\u0435\u043D\u0442\u044F\u0431\u0440\u044C',\n        '\u041E\u043A\u0442\u044F\u0431\u0440\u044C',\n        '\u041D\u043E\u044F\u0431\u0440\u044C',\n        '\u0414\u0435\u043A\u0430\u0431\u0440\u044C'\n    ],\n    ptBr: [\n        'Janeiro',\n        'Fevereiro',\n        'Mar\u00E7o',\n        'Abril',\n        'Maio',\n        'Junho',\n        'Julho',\n        'Agosto',\n        'Setembro',\n        'Outubro',\n        'Novembro',\n        'Dezembro'\n    ],\n    fr: [\n        'Janvier',\n        'F\u00E9vrier',\n        'Mars',\n        'Avril',\n        'Mai',\n        'Juin',\n        'Juillet',\n        'Ao\u00FBt',\n        'Septembre',\n        'Octobre',\n        'Novembre',\n        'D\u00E9cembre'\n    ],\n    tr: [\n        'Ocak',\n        '\u015Eubat',\n        'Mart',\n        'Nisan',\n        'May\u0131s',\n        'Haziran',\n        'Temmuz',\n        'A\u011Fustos',\n        'Eyl\u00FCl',\n        'Ekim',\n        'Kas\u0131m',\n        'Aral\u0131k'\n    ],\n    zh: [\n        '\u4E00\u6708',\n        '\u4E8C\u6708',\n        '\u4E09\u6708',\n        '\u56DB\u6708',\n        '\u4E94\u6708',\n        '\u516D\u6708',\n        '\u4E03\u6708',\n        '\u516B\u6708',\n        '\u4E5D\u6708',\n        '\u5341\u6708',\n        '\u5341\u4E00\u6708',\n        '\u5341\u4E8C\u6708'\n    ]\n};\n\nvar date_utils = {\n    parse(date, date_separator = '-', time_separator = /[.:]/) {\n        if (date instanceof Date) {\n            return date;\n        }\n        if (typeof date === 'string') {\n            let date_parts, time_parts;\n            const parts = date.split(' ');\n\n            date_parts = parts[0]\n                .split(date_separator)\n                .map(val => parseInt(val, 10));\n            time_parts = parts[1] && parts[1].split(time_separator);\n\n            // month is 0 indexed\n            date_parts[1] = date_parts[1] - 1;\n\n            let vals = date_parts;\n\n            if (time_parts && time_parts.length) {\n                if (time_parts.length == 4) {\n                    time_parts[3] = '0.' + time_parts[3];\n                    time_parts[3] = parseFloat(time_parts[3]) * 1000;\n                }\n                vals = vals.concat(time_parts);\n            }\n\n            return new Date(...vals);\n        }\n    },\n\n    to_string(date, with_time = false) {\n        if (!(date instanceof Date)) {\n            throw new TypeError('Invalid argument type');\n        }\n        const vals = this.get_date_values(date).map((val, i) => {\n            if (i === 1) {\n                // add 1 for month\n                val = val + 1;\n            }\n\n            if (i === 6) {\n                return padStart(val + '', 3, '0');\n            }\n\n            return padStart(val + '', 2, '0');\n        });\n        const date_string = `${vals[0]}-${vals[1]}-${vals[2]}`;\n        const time_string = `${vals[3]}:${vals[4]}:${vals[5]}.${vals[6]}`;\n\n        return date_string + (with_time ? ' ' + time_string : '');\n    },\n\n    format(date, format_string = 'YYYY-MM-DD HH:mm:ss.SSS', lang = 'en') {\n        const values = this.get_date_values(date).map(d => padStart(d, 2, 0));\n        const format_map = {\n            YYYY: values[0],\n            MM: padStart(+values[1] + 1, 2, 0),\n            DD: values[2],\n            HH: values[3],\n            mm: values[4],\n            ss: values[5],\n            SSS:values[6],\n            D: values[2],\n            MMMM: month_names[lang][+values[1]],\n            MMM: month_names[lang][+values[1]]\n        };\n\n        let str = format_string;\n        const formatted_values = [];\n\n        Object.keys(format_map)\n            .sort((a, b) => b.length - a.length) // big string first\n            .forEach(key => {\n                if (str.includes(key)) {\n                    str = str.replace(key, `$${formatted_values.length}`);\n                    formatted_values.push(format_map[key]);\n                }\n            });\n\n        formatted_values.forEach((value, i) => {\n            str = str.replace(`$${i}`, value);\n        });\n\n        return str;\n    },\n\n    diff(date_a, date_b, scale = DAY) {\n        let milliseconds, seconds, hours, minutes, days, months, years;\n\n        milliseconds = date_a - date_b;\n        seconds = milliseconds / 1000;\n        minutes = seconds / 60;\n        hours = minutes / 60;\n        days = hours / 24;\n        months = days / 30;\n        years = months / 12;\n\n        if (!scale.endsWith('s')) {\n            scale += 's';\n        }\n\n        return Math.floor(\n            {\n                milliseconds,\n                seconds,\n                minutes,\n                hours,\n                days,\n                months,\n                years\n            }[scale]\n        );\n    },\n\n    today() {\n        const vals = this.get_date_values(new Date()).slice(0, 3);\n        return new Date(...vals);\n    },\n\n    now() {\n        return new Date();\n    },\n\n    add(date, qty, scale) {\n        qty = parseInt(qty, 10);\n        const vals = [\n            date.getFullYear() + (scale === YEAR ? qty : 0),\n            date.getMonth() + (scale === MONTH ? qty : 0),\n            date.getDate() + (scale === DAY ? qty : 0),\n            date.getHours() + (scale === HOUR ? qty : 0),\n            date.getMinutes() + (scale === MINUTE ? qty : 0),\n            date.getSeconds() + (scale === SECOND ? qty : 0),\n            date.getMilliseconds() + (scale === MILLISECOND ? qty : 0)\n        ];\n        return new Date(...vals);\n    },\n\n    start_of(date, scale) {\n        const scores = {\n            [YEAR]: 6,\n            [MONTH]: 5,\n            [DAY]: 4,\n            [HOUR]: 3,\n            [MINUTE]: 2,\n            [SECOND]: 1,\n            [MILLISECOND]: 0\n        };\n\n        function should_reset(_scale) {\n            const max_score = scores[scale];\n            return scores[_scale] <= max_score;\n        }\n\n        const vals = [\n            date.getFullYear(),\n            should_reset(YEAR) ? 0 : date.getMonth(),\n            should_reset(MONTH) ? 1 : date.getDate(),\n            should_reset(DAY) ? 0 : date.getHours(),\n            should_reset(HOUR) ? 0 : date.getMinutes(),\n            should_reset(MINUTE) ? 0 : date.getSeconds(),\n            should_reset(SECOND) ? 0 : date.getMilliseconds()\n        ];\n\n        return new Date(...vals);\n    },\n\n    clone(date) {\n        return new Date(...this.get_date_values(date));\n    },\n\n    get_date_values(date) {\n        return [\n            date.getFullYear(),\n            date.getMonth(),\n            date.getDate(),\n            date.getHours(),\n            date.getMinutes(),\n            date.getSeconds(),\n            date.getMilliseconds()\n        ];\n    },\n\n    get_days_in_month(date) {\n        const no_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n        const month = date.getMonth();\n\n        if (month !== 1) {\n            return no_of_days[month];\n        }\n\n        // Feb\n        const year = date.getFullYear();\n        if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\n            return 29;\n        }\n        return 28;\n    }\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\nfunction padStart(str, targetLength, padString) {\n    str = str + '';\n    targetLength = targetLength >> 0;\n    padString = String(typeof padString !== 'undefined' ? padString : ' ');\n    if (str.length > targetLength) {\n        return String(str);\n    } else {\n        targetLength = targetLength - str.length;\n        if (targetLength > padString.length) {\n            padString += padString.repeat(targetLength / padString.length);\n        }\n        return padString.slice(0, targetLength) + String(str);\n    }\n}\n\nfunction $(expr, con) {\n    return typeof expr === 'string'\n        ? (con || document).querySelector(expr)\n        : expr || null;\n}\n\nfunction createSVG(tag, attrs) {\n    const elem = document.createElementNS('http://www.w3.org/2000/svg', tag);\n    for (let attr in attrs) {\n        if (attr === 'append_to') {\n            const parent = attrs.append_to;\n            parent.appendChild(elem);\n        } else if (attr === 'innerHTML') {\n            elem.innerHTML = attrs.innerHTML;\n        } else {\n            elem.setAttribute(attr, attrs[attr]);\n        }\n    }\n    return elem;\n}\n\nfunction animateSVG(svgElement, attr, from, to) {\n    const animatedSvgElement = getAnimationElement(svgElement, attr, from, to);\n\n    if (animatedSvgElement === svgElement) {\n        // triggered 2nd time programmatically\n        // trigger artificial click event\n        const event = document.createEvent('HTMLEvents');\n        event.initEvent('click', true, true);\n        event.eventName = 'click';\n        animatedSvgElement.dispatchEvent(event);\n    }\n}\n\nfunction getAnimationElement(\n    svgElement,\n    attr,\n    from,\n    to,\n    dur = '0.4s',\n    begin = '0.1s'\n) {\n    const animEl = svgElement.querySelector('animate');\n    if (animEl) {\n        $.attr(animEl, {\n            attributeName: attr,\n            from,\n            to,\n            dur,\n            begin: 'click + ' + begin // artificial click\n        });\n        return svgElement;\n    }\n\n    const animateElement = createSVG('animate', {\n        attributeName: attr,\n        from,\n        to,\n        dur,\n        begin,\n        calcMode: 'spline',\n        values: from + ';' + to,\n        keyTimes: '0; 1',\n        keySplines: cubic_bezier('ease-out')\n    });\n    svgElement.appendChild(animateElement);\n\n    return svgElement;\n}\n\nfunction cubic_bezier(name) {\n    return {\n        ease: '.25 .1 .25 1',\n        linear: '0 0 1 1',\n        'ease-in': '.42 0 1 1',\n        'ease-out': '0 0 .58 1',\n        'ease-in-out': '.42 0 .58 1'\n    }[name];\n}\n\n$.on = (element, event, selector, callback) => {\n    if (!callback) {\n        callback = selector;\n        $.bind(element, event, callback);\n    } else {\n        $.delegate(element, event, selector, callback);\n    }\n};\n\n$.off = (element, event, handler) => {\n    element.removeEventListener(event, handler);\n};\n\n$.bind = (element, event, callback) => {\n    event.split(/\\s+/).forEach(function(event) {\n        element.addEventListener(event, callback);\n    });\n};\n\n$.delegate = (element, event, selector, callback) => {\n    element.addEventListener(event, function(e) {\n        const delegatedTarget = e.target.closest(selector);\n        if (delegatedTarget) {\n            e.delegatedTarget = delegatedTarget;\n            callback.call(this, e, delegatedTarget);\n        }\n    });\n};\n\n$.closest = (selector, element) => {\n    if (!element) return null;\n\n    if (element.matches(selector)) {\n        return element;\n    }\n\n    return $.closest(selector, element.parentNode);\n};\n\n$.attr = (element, attr, value) => {\n    if (!value && typeof attr === 'string') {\n        return element.getAttribute(attr);\n    }\n\n    if (typeof attr === 'object') {\n        for (let key in attr) {\n            $.attr(element, key, attr[key]);\n        }\n        return;\n    }\n\n    element.setAttribute(attr, value);\n};\n\nclass Bar {\n    constructor(gantt, task) {\n        this.set_defaults(gantt, task);\n        this.prepare();\n        this.draw();\n        this.bind();\n    }\n\n    set_defaults(gantt, task) {\n        this.action_completed = false;\n        this.gantt = gantt;\n        this.task = task;\n    }\n\n    prepare() {\n        this.prepare_values();\n        this.prepare_helpers();\n    }\n\n    prepare_values() {\n        this.invalid = this.task.invalid;\n        this.height = this.gantt.options.bar_height;\n        this.x = this.compute_x();\n        this.y = this.compute_y();\n        this.corner_radius = this.gantt.options.bar_corner_radius;\n        this.duration =\n            date_utils.diff(this.task._end, this.task._start, 'hour') /\n            this.gantt.options.step;\n        this.width = this.gantt.options.column_width * this.duration;\n        this.progress_width =\n            this.gantt.options.column_width *\n                this.duration *\n                (this.task.progress / 100) || 0;\n        this.group = createSVG('g', {\n            class: 'bar-wrapper ' + (this.task.custom_class || ''),\n            'data-id': this.task.id\n        });\n        this.bar_group = createSVG('g', {\n            class: 'bar-group',\n            append_to: this.group\n        });\n        this.handle_group = createSVG('g', {\n            class: 'handle-group',\n            append_to: this.group\n        });\n    }\n\n    prepare_helpers() {\n        SVGElement.prototype.getX = function() {\n            return +this.getAttribute('x');\n        };\n        SVGElement.prototype.getY = function() {\n            return +this.getAttribute('y');\n        };\n        SVGElement.prototype.getWidth = function() {\n            return +this.getAttribute('width');\n        };\n        SVGElement.prototype.getHeight = function() {\n            return +this.getAttribute('height');\n        };\n        SVGElement.prototype.getEndX = function() {\n            return this.getX() + this.getWidth();\n        };\n    }\n\n    draw() {\n        this.draw_bar();\n        this.draw_progress_bar();\n        this.draw_label();\n        this.draw_resize_handles();\n    }\n\n    draw_bar() {\n        this.$bar = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar',\n            append_to: this.bar_group\n        });\n\n        animateSVG(this.$bar, 'width', 0, this.width);\n\n        if (this.invalid) {\n            this.$bar.classList.add('bar-invalid');\n        }\n    }\n\n    draw_progress_bar() {\n        if (this.invalid) return;\n        this.$bar_progress = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.progress_width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar-progress',\n            append_to: this.bar_group\n        });\n\n        animateSVG(this.$bar_progress, 'width', 0, this.progress_width);\n    }\n\n    draw_label() {\n        createSVG('text', {\n            x: this.x + this.width / 2,\n            y: this.y + this.height / 2,\n            innerHTML: this.task.name,\n            class: 'bar-label',\n            append_to: this.bar_group\n        });\n        // labels get BBox in the next tick\n        requestAnimationFrame(() => this.update_label_position());\n    }\n\n    draw_resize_handles() {\n        if (this.invalid) return;\n\n        const bar = this.$bar;\n        const handle_width = 8;\n\n        createSVG('rect', {\n            x: bar.getX() + bar.getWidth() - 9,\n            y: bar.getY() + 1,\n            width: handle_width,\n            height: this.height - 2,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'handle right',\n            append_to: this.handle_group\n        });\n\n        createSVG('rect', {\n            x: bar.getX() + 1,\n            y: bar.getY() + 1,\n            width: handle_width,\n            height: this.height - 2,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'handle left',\n            append_to: this.handle_group\n        });\n\n        if (this.task.progress && this.task.progress < 100) {\n            this.$handle_progress = createSVG('polygon', {\n                points: this.get_progress_polygon_points().join(','),\n                class: 'handle progress',\n                append_to: this.handle_group\n            });\n        }\n    }\n\n    get_progress_polygon_points() {\n        const bar_progress = this.$bar_progress;\n        return [\n            bar_progress.getEndX() - 5,\n            bar_progress.getY() + bar_progress.getHeight(),\n            bar_progress.getEndX() + 5,\n            bar_progress.getY() + bar_progress.getHeight(),\n            bar_progress.getEndX(),\n            bar_progress.getY() + bar_progress.getHeight() - 8.66\n        ];\n    }\n\n    bind() {\n        if (this.invalid) return;\n        this.setup_click_event();\n    }\n\n    setup_click_event() {\n        $.on(this.group, 'focus ' + this.gantt.options.popup_trigger, e => {\n            if (this.action_completed) {\n                // just finished a move action, wait for a few seconds\n                return;\n            }\n\n            this.show_popup();\n            this.gantt.unselect_all();\n            this.group.classList.add('active');\n        });\n\n        $.on(this.group, 'dblclick', e => {\n            if (this.action_completed) {\n                // just finished a move action, wait for a few seconds\n                return;\n            }\n\n            this.gantt.trigger_event('click', [this.task]);\n        });\n    }\n\n    show_popup() {\n        if (this.gantt.bar_being_dragged) return;\n\n        const start_date = date_utils.format(this.task._start, 'MMM D', this.gantt.options.language);\n        const end_date = date_utils.format(\n            date_utils.add(this.task._end, -1, 'second'),\n            'MMM D',\n            this.gantt.options.language\n        );\n        const subtitle = start_date + ' - ' + end_date;\n\n        this.gantt.show_popup({\n            target_element: this.$bar,\n            title: this.task.name,\n            subtitle: subtitle,\n            task: this.task,\n        });\n    }\n\n    update_bar_position({ x = null, width = null }) {\n        const bar = this.$bar;\n        if (x) {\n            // get all x values of parent task\n            const xs = this.task.dependencies.map(dep => {\n                return this.gantt.get_bar(dep).$bar.getX();\n            });\n            // child task must not go before parent\n            const valid_x = xs.reduce((prev, curr) => {\n                return x >= curr;\n            }, x);\n            if (!valid_x) {\n                width = null;\n                return;\n            }\n            this.update_attr(bar, 'x', x);\n        }\n        if (width && width >= this.gantt.options.column_width) {\n            this.update_attr(bar, 'width', width);\n        }\n        this.update_label_position();\n        this.update_handle_position();\n        this.update_progressbar_position();\n        this.update_arrow_position();\n    }\n\n    date_changed() {\n        let changed = false;\n        const { new_start_date, new_end_date } = this.compute_start_end_date();\n\n        if (Number(this.task._start) !== Number(new_start_date)) {\n            changed = true;\n            this.task._start = new_start_date;\n        }\n\n        if (Number(this.task._end) !== Number(new_end_date)) {\n            changed = true;\n            this.task._end = new_end_date;\n        }\n\n        if (!changed) return;\n\n        this.gantt.trigger_event('date_change', [\n            this.task,\n            new_start_date,\n            date_utils.add(new_end_date, -1, 'second')\n        ]);\n    }\n\n    progress_changed() {\n        const new_progress = this.compute_progress();\n        this.task.progress = new_progress;\n        this.gantt.trigger_event('progress_change', [this.task, new_progress]);\n    }\n\n    set_action_completed() {\n        this.action_completed = true;\n        setTimeout(() => (this.action_completed = false), 1000);\n    }\n\n    compute_start_end_date() {\n        const bar = this.$bar;\n        const x_in_units = bar.getX() / this.gantt.options.column_width;\n        const new_start_date = date_utils.add(\n            this.gantt.gantt_start,\n            x_in_units * this.gantt.options.step,\n            'hour'\n        );\n        const width_in_units = bar.getWidth() / this.gantt.options.column_width;\n        const new_end_date = date_utils.add(\n            new_start_date,\n            width_in_units * this.gantt.options.step,\n            'hour'\n        );\n\n        return { new_start_date, new_end_date };\n    }\n\n    compute_progress() {\n        const progress =\n            this.$bar_progress.getWidth() / this.$bar.getWidth() * 100;\n        return parseInt(progress, 10);\n    }\n\n    compute_x() {\n        const { step, column_width } = this.gantt.options;\n        const task_start = this.task._start;\n        const gantt_start = this.gantt.gantt_start;\n\n        const diff = date_utils.diff(task_start, gantt_start, 'hour');\n        let x = diff / step * column_width;\n\n        if (this.gantt.view_is('Month')) {\n            const diff = date_utils.diff(task_start, gantt_start, 'day');\n            x = diff * column_width / 30;\n        }\n        return x;\n    }\n\n    compute_y() {\n        return (\n            this.gantt.options.header_height +\n            this.gantt.options.padding +\n            this.task._index * (this.height + this.gantt.options.padding)\n        );\n    }\n\n    get_snap_position(dx) {\n        let odx = dx,\n            rem,\n            position;\n\n        if (this.gantt.view_is('Week')) {\n            rem = dx % (this.gantt.options.column_width / 7);\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 14\n                    ? 0\n                    : this.gantt.options.column_width / 7);\n        } else if (this.gantt.view_is('Month')) {\n            rem = dx % (this.gantt.options.column_width / 30);\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 60\n                    ? 0\n                    : this.gantt.options.column_width / 30);\n        } else {\n            rem = dx % this.gantt.options.column_width;\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 2\n                    ? 0\n                    : this.gantt.options.column_width);\n        }\n        return position;\n    }\n\n    update_attr(element, attr, value) {\n        value = +value;\n        if (!isNaN(value)) {\n            element.setAttribute(attr, value);\n        }\n        return element;\n    }\n\n    update_progressbar_position() {\n        this.$bar_progress.setAttribute('x', this.$bar.getX());\n        this.$bar_progress.setAttribute(\n            'width',\n            this.$bar.getWidth() * (this.task.progress / 100)\n        );\n    }\n\n    update_label_position() {\n        const bar = this.$bar,\n            label = this.group.querySelector('.bar-label');\n\n        if (label.getBBox().width > bar.getWidth()) {\n            label.classList.add('big');\n            label.setAttribute('x', bar.getX() + bar.getWidth() + 5);\n        } else {\n            label.classList.remove('big');\n            label.setAttribute('x', bar.getX() + bar.getWidth() / 2);\n        }\n    }\n\n    update_handle_position() {\n        const bar = this.$bar;\n        this.handle_group\n            .querySelector('.handle.left')\n            .setAttribute('x', bar.getX() + 1);\n        this.handle_group\n            .querySelector('.handle.right')\n            .setAttribute('x', bar.getEndX() - 9);\n        const handle = this.group.querySelector('.handle.progress');\n        handle &&\n            handle.setAttribute('points', this.get_progress_polygon_points());\n    }\n\n    update_arrow_position() {\n        this.arrows = this.arrows || [];\n        for (let arrow of this.arrows) {\n            arrow.update();\n        }\n    }\n}\n\nclass Arrow {\n    constructor(gantt, from_task, to_task) {\n        this.gantt = gantt;\n        this.from_task = from_task;\n        this.to_task = to_task;\n\n        this.calculate_path();\n        this.draw();\n    }\n\n    calculate_path() {\n        let start_x =\n            this.from_task.$bar.getX() + this.from_task.$bar.getWidth() / 2;\n\n        const condition = () =>\n            this.to_task.$bar.getX() < start_x + this.gantt.options.padding &&\n            start_x > this.from_task.$bar.getX() + this.gantt.options.padding;\n\n        while (condition()) {\n            start_x -= 10;\n        }\n\n        const start_y =\n            this.gantt.options.header_height +\n            this.gantt.options.bar_height +\n            (this.gantt.options.padding + this.gantt.options.bar_height) *\n                this.from_task.task._index +\n            this.gantt.options.padding;\n\n        const end_x = this.to_task.$bar.getX() - this.gantt.options.padding / 2;\n        const end_y =\n            this.gantt.options.header_height +\n            this.gantt.options.bar_height / 2 +\n            (this.gantt.options.padding + this.gantt.options.bar_height) *\n                this.to_task.task._index +\n            this.gantt.options.padding;\n\n        const from_is_below_to =\n            this.from_task.task._index > this.to_task.task._index;\n        const curve = this.gantt.options.arrow_curve;\n        const clockwise = from_is_below_to ? 1 : 0;\n        const curve_y = from_is_below_to ? -curve : curve;\n        const offset = from_is_below_to\n            ? end_y + this.gantt.options.arrow_curve\n            : end_y - this.gantt.options.arrow_curve;\n\n        this.path = `\n            M ${start_x} ${start_y}\n            V ${offset}\n            a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\n            L ${end_x} ${end_y}\n            m -5 -5\n            l 5 5\n            l -5 5`;\n\n        if (\n            this.to_task.$bar.getX() <\n            this.from_task.$bar.getX() + this.gantt.options.padding\n        ) {\n            const down_1 = this.gantt.options.padding / 2 - curve;\n            const down_2 =\n                this.to_task.$bar.getY() +\n                this.to_task.$bar.getHeight() / 2 -\n                curve_y;\n            const left = this.to_task.$bar.getX() - this.gantt.options.padding;\n\n            this.path = `\n                M ${start_x} ${start_y}\n                v ${down_1}\n                a ${curve} ${curve} 0 0 1 -${curve} ${curve}\n                H ${left}\n                a ${curve} ${curve} 0 0 ${clockwise} -${curve} ${curve_y}\n                V ${down_2}\n                a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\n                L ${end_x} ${end_y}\n                m -5 -5\n                l 5 5\n                l -5 5`;\n        }\n    }\n\n    draw() {\n        this.element = createSVG('path', {\n            d: this.path,\n            'data-from': this.from_task.task.id,\n            'data-to': this.to_task.task.id\n        });\n    }\n\n    update() {\n        this.calculate_path();\n        this.element.setAttribute('d', this.path);\n    }\n}\n\nclass Popup {\n    constructor(parent, custom_html) {\n        this.parent = parent;\n        this.custom_html = custom_html;\n        this.make();\n    }\n\n    make() {\n        this.parent.innerHTML = `\n            <div class=\"title\"></div>\n            <div class=\"subtitle\"></div>\n            <div class=\"pointer\"></div>\n        `;\n\n        this.hide();\n\n        this.title = this.parent.querySelector('.title');\n        this.subtitle = this.parent.querySelector('.subtitle');\n        this.pointer = this.parent.querySelector('.pointer');\n    }\n\n    show(options) {\n        if (!options.target_element) {\n            throw new Error('target_element is required to show popup');\n        }\n        if (!options.position) {\n            options.position = 'left';\n        }\n        const target_element = options.target_element;\n\n        if (this.custom_html) {\n            let html = this.custom_html(options.task);\n            html += '<div class=\"pointer\"></div>';\n            this.parent.innerHTML = html;\n            this.pointer = this.parent.querySelector('.pointer');\n        } else {\n            // set data\n            this.title.innerHTML = options.title;\n            this.subtitle.innerHTML = options.subtitle;\n            this.parent.style.width = this.parent.clientWidth + 'px';\n        }\n\n        // set position\n        let position_meta;\n        if (target_element instanceof HTMLElement) {\n            position_meta = target_element.getBoundingClientRect();\n        } else if (target_element instanceof SVGElement) {\n            position_meta = options.target_element.getBBox();\n        }\n\n        if (options.position === 'left') {\n            this.parent.style.left =\n                position_meta.x + (position_meta.width + 10) + 'px';\n            this.parent.style.top = position_meta.y + 'px';\n\n            this.pointer.style.transform = 'rotateZ(90deg)';\n            this.pointer.style.left = '-7px';\n            this.pointer.style.top = '2px';\n        }\n\n        // show\n        this.parent.style.opacity = 1;\n    }\n\n    hide() {\n        this.parent.style.opacity = 0;\n        this.parent.style.left = 0;\n    }\n}\n\nconst VIEW_MODE = {\n    QUARTER_DAY: 'Quarter Day',\n    HALF_DAY: 'Half Day',\n    DAY: 'Day',\n    WEEK: 'Week',\n    MONTH: 'Month',\n    YEAR: 'Year'\n};\n\nclass Gantt {\n    constructor(wrapper, tasks, options) {\n        this.setup_wrapper(wrapper);\n        this.setup_options(options);\n        this.setup_tasks(tasks);\n        // initialize with default view mode\n        this.change_view_mode();\n        this.bind_events();\n    }\n\n    setup_wrapper(element) {\n        let svg_element, wrapper_element;\n\n        // CSS Selector is passed\n        if (typeof element === 'string') {\n            element = document.querySelector(element);\n        }\n\n        // get the SVGElement\n        if (element instanceof HTMLElement) {\n            wrapper_element = element;\n            svg_element = element.querySelector('svg');\n        } else if (element instanceof SVGElement) {\n            svg_element = element;\n        } else {\n            throw new TypeError(\n                'Frapp\u00E9 Gantt only supports usage of a string CSS selector,' +\n                    \" HTML DOM element or SVG DOM element for the 'element' parameter\"\n            );\n        }\n\n        // svg element\n        if (!svg_element) {\n            // create it\n            this.$svg = createSVG('svg', {\n                append_to: wrapper_element,\n                class: 'gantt'\n            });\n        } else {\n            this.$svg = svg_element;\n            this.$svg.classList.add('gantt');\n        }\n\n        // wrapper element\n        this.$container = document.createElement('div');\n        this.$container.classList.add('gantt-container');\n\n        const parent_element = this.$svg.parentElement;\n        parent_element.appendChild(this.$container);\n        this.$container.appendChild(this.$svg);\n\n        // popup wrapper\n        this.popup_wrapper = document.createElement('div');\n        this.popup_wrapper.classList.add('popup-wrapper');\n        this.$container.appendChild(this.popup_wrapper);\n    }\n\n    setup_options(options) {\n        const default_options = {\n            header_height: 50,\n            column_width: 30,\n            step: 24,\n            view_modes: [...Object.values(VIEW_MODE)],\n            bar_height: 20,\n            bar_corner_radius: 3,\n            arrow_curve: 5,\n            padding: 18,\n            view_mode: 'Day',\n            date_format: 'YYYY-MM-DD',\n            popup_trigger: 'click',\n            custom_popup_html: null,\n            language: 'en'\n        };\n        this.options = Object.assign({}, default_options, options);\n    }\n\n    setup_tasks(tasks) {\n        // prepare tasks\n        this.tasks = tasks.map((task, i) => {\n            // convert to Date objects\n            task._start = date_utils.parse(task.start);\n            task._end = date_utils.parse(task.end);\n\n            // make task invalid if duration too large\n            if (date_utils.diff(task._end, task._start, 'year') > 10) {\n                task.end = null;\n            }\n\n            // cache index\n            task._index = i;\n\n            // invalid dates\n            if (!task.start && !task.end) {\n                const today = date_utils.today();\n                task._start = today;\n                task._end = date_utils.add(today, 2, 'day');\n            }\n\n            if (!task.start && task.end) {\n                task._start = date_utils.add(task._end, -2, 'day');\n            }\n\n            if (task.start && !task.end) {\n                task._end = date_utils.add(task._start, 2, 'day');\n            }\n\n            // if hours is not set, assume the last day is full day\n            // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\n            const task_end_values = date_utils.get_date_values(task._end);\n            if (task_end_values.slice(3).every(d => d === 0)) {\n                task._end = date_utils.add(task._end, 24, 'hour');\n            }\n\n            // invalid flag\n            if (!task.start || !task.end) {\n                task.invalid = true;\n            }\n\n            // dependencies\n            if (typeof task.dependencies === 'string' || !task.dependencies) {\n                let deps = [];\n                if (task.dependencies) {\n                    deps = task.dependencies\n                        .split(',')\n                        .map(d => d.trim())\n                        .filter(d => d);\n                }\n                task.dependencies = deps;\n            }\n\n            // uids\n            if (!task.id) {\n                task.id = generate_id(task);\n            }\n\n            return task;\n        });\n\n        this.setup_dependencies();\n    }\n\n    setup_dependencies() {\n        this.dependency_map = {};\n        for (let t of this.tasks) {\n            for (let d of t.dependencies) {\n                this.dependency_map[d] = this.dependency_map[d] || [];\n                this.dependency_map[d].push(t.id);\n            }\n        }\n    }\n\n    refresh(tasks) {\n        this.setup_tasks(tasks);\n        this.change_view_mode();\n    }\n\n    change_view_mode(mode = this.options.view_mode) {\n        this.update_view_scale(mode);\n        this.setup_dates();\n        this.render();\n        // fire viewmode_change event\n        this.trigger_event('view_change', [mode]);\n    }\n\n    update_view_scale(view_mode) {\n        this.options.view_mode = view_mode;\n\n        if (view_mode === VIEW_MODE.DAY) {\n            this.options.step = 24;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.HALF_DAY) {\n            this.options.step = 24 / 2;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.QUARTER_DAY) {\n            this.options.step = 24 / 4;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.WEEK) {\n            this.options.step = 24 * 7;\n            this.options.column_width = 140;\n        } else if (view_mode === VIEW_MODE.MONTH) {\n            this.options.step = 24 * 30;\n            this.options.column_width = 120;\n        } else if (view_mode === VIEW_MODE.YEAR) {\n            this.options.step = 24 * 365;\n            this.options.column_width = 120;\n        }\n    }\n\n    setup_dates() {\n        this.setup_gantt_dates();\n        this.setup_date_values();\n    }\n\n    setup_gantt_dates() {\n        this.gantt_start = this.gantt_end = null;\n\n        for (let task of this.tasks) {\n            // set global start and end date\n            if (!this.gantt_start || task._start < this.gantt_start) {\n                this.gantt_start = task._start;\n            }\n            if (!this.gantt_end || task._end > this.gantt_end) {\n                this.gantt_end = task._end;\n            }\n        }\n\n        this.gantt_start = date_utils.start_of(this.gantt_start, 'day');\n        this.gantt_end = date_utils.start_of(this.gantt_end, 'day');\n\n        // add date padding on both sides\n        if (this.view_is([VIEW_MODE.QUARTER_DAY, VIEW_MODE.HALF_DAY])) {\n            this.gantt_start = date_utils.add(this.gantt_start, -7, 'day');\n            this.gantt_end = date_utils.add(this.gantt_end, 7, 'day');\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\n            this.gantt_start = date_utils.start_of(this.gantt_start, 'year');\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'year');\n        } else if (this.view_is(VIEW_MODE.YEAR)) {\n            this.gantt_start = date_utils.add(this.gantt_start, -2, 'year');\n            this.gantt_end = date_utils.add(this.gantt_end, 2, 'year');\n        } else {\n            this.gantt_start = date_utils.add(this.gantt_start, -1, 'month');\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'month');\n        }\n    }\n\n    setup_date_values() {\n        this.dates = [];\n        let cur_date = null;\n\n        while (cur_date === null || cur_date < this.gantt_end) {\n            if (!cur_date) {\n                cur_date = date_utils.clone(this.gantt_start);\n            } else {\n                if (this.view_is(VIEW_MODE.YEAR)) {\n                    cur_date = date_utils.add(cur_date, 1, 'year');\n                } else if (this.view_is(VIEW_MODE.MONTH)) {\n                    cur_date = date_utils.add(cur_date, 1, 'month');\n                } else {\n                    cur_date = date_utils.add(\n                        cur_date,\n                        this.options.step,\n                        'hour'\n                    );\n                }\n            }\n            this.dates.push(cur_date);\n        }\n    }\n\n    bind_events() {\n        this.bind_grid_click();\n        this.bind_bar_events();\n    }\n\n    render() {\n        this.clear();\n        this.setup_layers();\n        this.make_grid();\n        this.make_dates();\n        this.make_bars();\n        this.make_arrows();\n        this.map_arrows_on_bars();\n        this.set_width();\n        this.set_scroll_position();\n    }\n\n    setup_layers() {\n        this.layers = {};\n        const layers = ['grid', 'date', 'arrow', 'progress', 'bar', 'details'];\n        // make group layers\n        for (let layer of layers) {\n            this.layers[layer] = createSVG('g', {\n                class: layer,\n                append_to: this.$svg\n            });\n        }\n    }\n\n    make_grid() {\n        this.make_grid_background();\n        this.make_grid_rows();\n        this.make_grid_header();\n        this.make_grid_ticks();\n        this.make_grid_highlights();\n    }\n\n    make_grid_background() {\n        const grid_width = this.dates.length * this.options.column_width;\n        const grid_height =\n            this.options.header_height +\n            this.options.padding +\n            (this.options.bar_height + this.options.padding) *\n                this.tasks.length;\n\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: grid_width,\n            height: grid_height,\n            class: 'grid-background',\n            append_to: this.layers.grid\n        });\n\n        $.attr(this.$svg, {\n            height: grid_height + this.options.padding + 100,\n            width: '100%'\n        });\n    }\n\n    make_grid_rows() {\n        const rows_layer = createSVG('g', { append_to: this.layers.grid });\n        const lines_layer = createSVG('g', { append_to: this.layers.grid });\n\n        const row_width = this.dates.length * this.options.column_width;\n        const row_height = this.options.bar_height + this.options.padding;\n\n        let row_y = this.options.header_height + this.options.padding / 2;\n\n        for (let task of this.tasks) {\n            createSVG('rect', {\n                x: 0,\n                y: row_y,\n                width: row_width,\n                height: row_height,\n                class: 'grid-row',\n                append_to: rows_layer\n            });\n\n            createSVG('line', {\n                x1: 0,\n                y1: row_y + row_height,\n                x2: row_width,\n                y2: row_y + row_height,\n                class: 'row-line',\n                append_to: lines_layer\n            });\n\n            row_y += this.options.bar_height + this.options.padding;\n        }\n    }\n\n    make_grid_header() {\n        const header_width = this.dates.length * this.options.column_width;\n        const header_height = this.options.header_height + 10;\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: header_width,\n            height: header_height,\n            class: 'grid-header',\n            append_to: this.layers.grid\n        });\n    }\n\n    make_grid_ticks() {\n        let tick_x = 0;\n        let tick_y = this.options.header_height + this.options.padding / 2;\n        let tick_height =\n            (this.options.bar_height + this.options.padding) *\n            this.tasks.length;\n\n        for (let date of this.dates) {\n            let tick_class = 'tick';\n            // thick tick for monday\n            if (this.view_is(VIEW_MODE.DAY) && date.getDate() === 1) {\n                tick_class += ' thick';\n            }\n            // thick tick for first week\n            if (\n                this.view_is(VIEW_MODE.WEEK) &&\n                date.getDate() >= 1 &&\n                date.getDate() < 8\n            ) {\n                tick_class += ' thick';\n            }\n            // thick ticks for quarters\n            if (this.view_is(VIEW_MODE.MONTH) && (date.getMonth() + 1) % 3 === 0) {\n                tick_class += ' thick';\n            }\n\n            createSVG('path', {\n                d: `M ${tick_x} ${tick_y} v ${tick_height}`,\n                class: tick_class,\n                append_to: this.layers.grid\n            });\n\n            if (this.view_is(VIEW_MODE.MONTH)) {\n                tick_x +=\n                    date_utils.get_days_in_month(date) *\n                    this.options.column_width /\n                    30;\n            } else {\n                tick_x += this.options.column_width;\n            }\n        }\n    }\n\n    make_grid_highlights() {\n        // highlight today's date\n        if (this.view_is(VIEW_MODE.DAY)) {\n            const x =\n                date_utils.diff(date_utils.today(), this.gantt_start, 'hour') /\n                this.options.step *\n                this.options.column_width;\n            const y = 0;\n\n            const width = this.options.column_width;\n            const height =\n                (this.options.bar_height + this.options.padding) *\n                    this.tasks.length +\n                this.options.header_height +\n                this.options.padding / 2;\n\n            createSVG('rect', {\n                x,\n                y,\n                width,\n                height,\n                class: 'today-highlight',\n                append_to: this.layers.grid\n            });\n        }\n    }\n\n    make_dates() {\n        for (let date of this.get_dates_to_draw()) {\n            createSVG('text', {\n                x: date.lower_x,\n                y: date.lower_y,\n                innerHTML: date.lower_text,\n                class: 'lower-text',\n                append_to: this.layers.date\n            });\n\n            if (date.upper_text) {\n                const $upper_text = createSVG('text', {\n                    x: date.upper_x,\n                    y: date.upper_y,\n                    innerHTML: date.upper_text,\n                    class: 'upper-text',\n                    append_to: this.layers.date\n                });\n\n                // remove out-of-bound dates\n                if (\n                    $upper_text.getBBox().x2 > this.layers.grid.getBBox().width\n                ) {\n                    $upper_text.remove();\n                }\n            }\n        }\n    }\n\n    get_dates_to_draw() {\n        let last_date = null;\n        const dates = this.dates.map((date, i) => {\n            const d = this.get_date_info(date, last_date, i);\n            last_date = date;\n            return d;\n        });\n        return dates;\n    }\n\n    get_date_info(date, last_date, i) {\n        if (!last_date) {\n            last_date = date_utils.add(date, 1, 'year');\n        }\n        const date_text = {\n            'Quarter Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            'Half Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            Day_lower:\n                date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Week_lower:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : date_utils.format(date, 'D', this.options.language),\n            Month_lower: date_utils.format(date, 'MMMM', this.options.language),\n            Year_lower: date_utils.format(date, 'YYYY', this.options.language),\n            'Quarter Day_upper':\n                date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : '',\n            'Half Day_upper':\n                date.getDate() !== last_date.getDate()\n                    ? date.getMonth() !== last_date.getMonth()\n                      ? date_utils.format(date, 'D MMM', this.options.language)\n                      : date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Day_upper:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'MMMM', this.options.language)\n                    : '',\n            Week_upper:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'MMMM', this.options.language)\n                    : '',\n            Month_upper:\n                date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : '',\n            Year_upper:\n                date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : ''\n        };\n\n        const base_pos = {\n            x: i * this.options.column_width,\n            lower_y: this.options.header_height,\n            upper_y: this.options.header_height - 25\n        };\n\n        const x_pos = {\n            'Quarter Day_lower': this.options.column_width * 4 / 2,\n            'Quarter Day_upper': 0,\n            'Half Day_lower': this.options.column_width * 2 / 2,\n            'Half Day_upper': 0,\n            Day_lower: this.options.column_width / 2,\n            Day_upper: this.options.column_width * 30 / 2,\n            Week_lower: 0,\n            Week_upper: this.options.column_width * 4 / 2,\n            Month_lower: this.options.column_width / 2,\n            Month_upper: this.options.column_width * 12 / 2,\n            Year_lower: this.options.column_width / 2,\n            Year_upper: this.options.column_width * 30 / 2\n        };\n\n        return {\n            upper_text: date_text[`${this.options.view_mode}_upper`],\n            lower_text: date_text[`${this.options.view_mode}_lower`],\n            upper_x: base_pos.x + x_pos[`${this.options.view_mode}_upper`],\n            upper_y: base_pos.upper_y,\n            lower_x: base_pos.x + x_pos[`${this.options.view_mode}_lower`],\n            lower_y: base_pos.lower_y\n        };\n    }\n\n    make_bars() {\n        this.bars = this.tasks.map(task => {\n            const bar = new Bar(this, task);\n            this.layers.bar.appendChild(bar.group);\n            return bar;\n        });\n    }\n\n    make_arrows() {\n        this.arrows = [];\n        for (let task of this.tasks) {\n            let arrows = [];\n            arrows = task.dependencies\n                .map(task_id => {\n                    const dependency = this.get_task(task_id);\n                    if (!dependency) return;\n                    const arrow = new Arrow(\n                        this,\n                        this.bars[dependency._index], // from_task\n                        this.bars[task._index] // to_task\n                    );\n                    this.layers.arrow.appendChild(arrow.element);\n                    return arrow;\n                })\n                .filter(Boolean); // filter falsy values\n            this.arrows = this.arrows.concat(arrows);\n        }\n    }\n\n    map_arrows_on_bars() {\n        for (let bar of this.bars) {\n            bar.arrows = this.arrows.filter(arrow => {\n                return (\n                    arrow.from_task.task.id === bar.task.id ||\n                    arrow.to_task.task.id === bar.task.id\n                );\n            });\n        }\n    }\n\n    set_width() {\n        const cur_width = this.$svg.getBoundingClientRect().width;\n        const actual_width = this.$svg\n            .querySelector('.grid .grid-row')\n            .getAttribute('width');\n        if (cur_width < actual_width) {\n            this.$svg.setAttribute('width', actual_width);\n        }\n    }\n\n    set_scroll_position() {\n        const parent_element = this.$svg.parentElement;\n        if (!parent_element) return;\n\n        const hours_before_first_task = date_utils.diff(\n            this.get_oldest_starting_date(),\n            this.gantt_start,\n            'hour'\n        );\n\n        const scroll_pos =\n            hours_before_first_task /\n                this.options.step *\n                this.options.column_width -\n            this.options.column_width;\n\n        parent_element.scrollLeft = scroll_pos;\n    }\n\n    bind_grid_click() {\n        $.on(\n            this.$svg,\n            this.options.popup_trigger,\n            '.grid-row, .grid-header',\n            () => {\n                this.unselect_all();\n                this.hide_popup();\n            }\n        );\n    }\n\n    bind_bar_events() {\n        let is_dragging = false;\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing_left = false;\n        let is_resizing_right = false;\n        let parent_bar_id = null;\n        let bars = []; // instanceof Bar\n        this.bar_being_dragged = null;\n\n        function action_in_progress() {\n            return is_dragging || is_resizing_left || is_resizing_right;\n        }\n\n        $.on(this.$svg, 'mousedown', '.bar-wrapper, .handle', (e, element) => {\n            const bar_wrapper = $.closest('.bar-wrapper', element);\n\n            if (element.classList.contains('left')) {\n                is_resizing_left = true;\n            } else if (element.classList.contains('right')) {\n                is_resizing_right = true;\n            } else if (element.classList.contains('bar-wrapper')) {\n                is_dragging = true;\n            }\n\n            bar_wrapper.classList.add('active');\n\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            parent_bar_id = bar_wrapper.getAttribute('data-id');\n            const ids = [\n                parent_bar_id,\n                ...this.get_all_dependent_tasks(parent_bar_id)\n            ];\n            bars = ids.map(id => this.get_bar(id));\n\n            this.bar_being_dragged = parent_bar_id;\n\n            bars.forEach(bar => {\n                const $bar = bar.$bar;\n                $bar.ox = $bar.getX();\n                $bar.oy = $bar.getY();\n                $bar.owidth = $bar.getWidth();\n                $bar.finaldx = 0;\n            });\n        });\n\n        $.on(this.$svg, 'mousemove', e => {\n            if (!action_in_progress()) return;\n            const dx = e.offsetX - x_on_start;\n            const dy = e.offsetY - y_on_start;\n\n            bars.forEach(bar => {\n                const $bar = bar.$bar;\n                $bar.finaldx = this.get_snap_position(dx);\n                this.hide_popup();\n                if (is_resizing_left) {\n                    if (parent_bar_id === bar.task.id) {\n                        bar.update_bar_position({\n                            x: $bar.ox + $bar.finaldx,\n                            width: $bar.owidth - $bar.finaldx\n                        });\n                    } else {\n                        bar.update_bar_position({\n                            x: $bar.ox + $bar.finaldx\n                        });\n                    }\n                } else if (is_resizing_right) {\n                    if (parent_bar_id === bar.task.id) {\n                        bar.update_bar_position({\n                            width: $bar.owidth + $bar.finaldx\n                        });\n                    }\n                } else if (is_dragging) {\n                    bar.update_bar_position({ x: $bar.ox + $bar.finaldx });\n                }\n            });\n        });\n\n        document.addEventListener('mouseup', e => {\n            if (is_dragging || is_resizing_left || is_resizing_right) {\n                bars.forEach(bar => bar.group.classList.remove('active'));\n            }\n\n            is_dragging = false;\n            is_resizing_left = false;\n            is_resizing_right = false;\n        });\n\n        $.on(this.$svg, 'mouseup', e => {\n            this.bar_being_dragged = null;\n            bars.forEach(bar => {\n                const $bar = bar.$bar;\n                if (!$bar.finaldx) return;\n                bar.date_changed();\n                bar.set_action_completed();\n            });\n        });\n\n        this.bind_bar_progress();\n    }\n\n    bind_bar_progress() {\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing = null;\n        let bar = null;\n        let $bar_progress = null;\n        let $bar = null;\n\n        $.on(this.$svg, 'mousedown', '.handle.progress', (e, handle) => {\n            is_resizing = true;\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            const $bar_wrapper = $.closest('.bar-wrapper', handle);\n            const id = $bar_wrapper.getAttribute('data-id');\n            bar = this.get_bar(id);\n\n            $bar_progress = bar.$bar_progress;\n            $bar = bar.$bar;\n\n            $bar_progress.finaldx = 0;\n            $bar_progress.owidth = $bar_progress.getWidth();\n            $bar_progress.min_dx = -$bar_progress.getWidth();\n            $bar_progress.max_dx = $bar.getWidth() - $bar_progress.getWidth();\n        });\n\n        $.on(this.$svg, 'mousemove', e => {\n            if (!is_resizing) return;\n            let dx = e.offsetX - x_on_start;\n            let dy = e.offsetY - y_on_start;\n\n            if (dx > $bar_progress.max_dx) {\n                dx = $bar_progress.max_dx;\n            }\n            if (dx < $bar_progress.min_dx) {\n                dx = $bar_progress.min_dx;\n            }\n\n            const $handle = bar.$handle_progress;\n            $.attr($bar_progress, 'width', $bar_progress.owidth + dx);\n            $.attr($handle, 'points', bar.get_progress_polygon_points());\n            $bar_progress.finaldx = dx;\n        });\n\n        $.on(this.$svg, 'mouseup', () => {\n            is_resizing = false;\n            if (!($bar_progress && $bar_progress.finaldx)) return;\n            bar.progress_changed();\n            bar.set_action_completed();\n        });\n    }\n\n    get_all_dependent_tasks(task_id) {\n        let out = [];\n        let to_process = [task_id];\n        while (to_process.length) {\n            const deps = to_process.reduce((acc, curr) => {\n                acc = acc.concat(this.dependency_map[curr]);\n                return acc;\n            }, []);\n\n            out = out.concat(deps);\n            to_process = deps.filter(d => !to_process.includes(d));\n        }\n\n        return out.filter(Boolean);\n    }\n\n    get_snap_position(dx) {\n        let odx = dx,\n            rem,\n            position;\n\n        if (this.view_is(VIEW_MODE.WEEK)) {\n            rem = dx % (this.options.column_width / 7);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 14\n                    ? 0\n                    : this.options.column_width / 7);\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\n            rem = dx % (this.options.column_width / 30);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 60\n                    ? 0\n                    : this.options.column_width / 30);\n        } else {\n            rem = dx % this.options.column_width;\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 2\n                    ? 0\n                    : this.options.column_width);\n        }\n        return position;\n    }\n\n    unselect_all() {\n        [...this.$svg.querySelectorAll('.bar-wrapper')].forEach(el => {\n            el.classList.remove('active');\n        });\n    }\n\n    view_is(modes) {\n        if (typeof modes === 'string') {\n            return this.options.view_mode === modes;\n        }\n\n        if (Array.isArray(modes)) {\n            return modes.some(mode => this.options.view_mode === mode);\n        }\n\n        return false;\n    }\n\n    get_task(id) {\n        return this.tasks.find(task => {\n            return task.id === id;\n        });\n    }\n\n    get_bar(id) {\n        return this.bars.find(bar => {\n            return bar.task.id === id;\n        });\n    }\n\n    show_popup(options) {\n        if (!this.popup) {\n            this.popup = new Popup(\n                this.popup_wrapper,\n                this.options.custom_popup_html\n            );\n        }\n        this.popup.show(options);\n    }\n\n    hide_popup() {\n        this.popup && this.popup.hide();\n    }\n\n    trigger_event(event, args) {\n        if (this.options['on_' + event]) {\n            this.options['on_' + event].apply(null, args);\n        }\n    }\n\n    /**\n     * Gets the oldest starting date from the list of tasks\n     *\n     * @returns Date\n     * @memberof Gantt\n     */\n    get_oldest_starting_date() {\n        return this.tasks\n            .map(task => task._start)\n            .reduce(\n                (prev_date, cur_date) =>\n                    cur_date <= prev_date ? cur_date : prev_date\n            );\n    }\n\n    /**\n     * Clear all elements from the parent svg element\n     *\n     * @memberof Gantt\n     */\n    clear() {\n        this.$svg.innerHTML = '';\n    }\n}\n\nGantt.VIEW_MODE = VIEW_MODE;\n\nfunction generate_id(task) {\n    return (\n        task.name +\n        '_' +\n        Math.random()\n            .toString(36)\n            .slice(2, 12)\n    );\n}\n\nreturn Gantt;\n\n}());\n", "export { default, links } from \"/home/tharyckgusmao/Documentos/tharyck/Projetos/remix/treelodot8/app/routes/index.jsx\";", "import { useLoaderData } from \"remix\"\nimport Box from \"~/components/BaseKit/Box/Box\"\nimport { ColumnCards, links as ColumnCardsLinks } from \"~/components/ColumnCards/ColumnCards\"\nimport { LeftNavbar, links as LeftNavbarlinks } from \"~/components/Navigation/LeftNavbar/LeftNavbar\"\nimport { Title, links as TitleLinks } from \"~/components/Title/Title\"\nimport { getCardsOnBoard, getListsOnBoard, getMembersOnBoard } from \"~/services/trello\"\nimport { members } from \"../services/trellotypes\"\nimport { authenticator } from \"~/services/auth\"\n\nexport function links() {\n  return [...LeftNavbarlinks, ...TitleLinks, ...ColumnCardsLinks]\n}\n\nconst factorSearch = (data, factor) => {\n  return data.labels.find((ee) => ee.name === factor)\n}\nconst extractDeadLine = (data) => {\n  return (\n    data\n      ?.split(\"\\n\")\n      ?.find((e) => e?.indexOf(\"**PREVIS\u00C3O:**\") > -1)\n      ?.split(\"**PREVIS\u00C3O:**\")\n      ?.slice(1)?.[0]\n      ?.replace(\" \", \"\") || \"N\u00E3o Definido\"\n  )\n}\nconst extractCreatedAt = (data) => {\n  return (\n    data\n      ?.split(\"\\n\")\n      ?.find((e) => e?.indexOf(\"**DATA DE CRIA\u00C7\u00C3O:**\") > -1)\n      ?.split(\"**DATA DE CRIA\u00C7\u00C3O:**\")\n      ?.slice(1)?.[0]\n      ?.replace(\" \", \"\") || \"N\u00E3o Definido\"\n  )\n}\n\nconst formatData = (data, labels) => {\n  let e = data\n  e.priority = e.labels.find((ee) => {\n    return [\"M\u00C9DIA\", \"ALTA\", \"BAIXA\"].findIndex((e) => e === ee.name) > -1\n  })?.name\n\n  e.priorityOrder = 3\n\n  if (e.priority === \"ALTA\") {\n    e.priorityOrder = 0\n  } else if (e.priority === \"M\u00C9DIA\") {\n    e.priorityOrder = 1\n  } else {\n    e.priorityOrder = 2\n  }\n\n  e.labels = labels\n  e.members = e.idMembers.map((e) => {\n    return members.find((ee) => ee.idMember === e)\n  })\n  e.dateDeadLine = extractDeadLine(e.desc)\n  e.createdAt = extractCreatedAt(e.desc)\n\n  e.show = true\n\n  if (e.dateDeadLine === \"N\u00E3o Definido\" || e.createdAt === \"N\u00E3o Definido\") {\n    e.show = false\n  }\n  return e\n}\n\nexport let loader = async ({ request }) => {\n  await authenticator.isAuthenticated(request, {\n    failureRedirect: \"/logar\",\n  })\n\n  let cards = await getCardsOnBoard()\n  let boards = await getListsOnBoard()\n  // let members = await getMembersOnBoard();\n\n  let group = [\n    {\n      title: \"IMPLEMENTA\u00C7\u00C3O\",\n      data: { finish: [], process: [] },\n      emoji: \"\uD83D\uDCA1\",\n    },\n    {\n      title: \"CORRE\u00C7\u00D5ES\",\n      data: { finish: [], process: [] },\n      emoji: \"\uD83D\uDEA8\",\n    },\n  ]\n\n  let trashColumn = boards.find((e) => e.name != \"DESCARTADOS\" || e.name != \"BACKLOG ANTIGO\")\n  let data = cards.filter((e) => e.idList != trashColumn.id)\n\n  data.forEach((e) => {\n    let labels = e.labels.filter((e) => [\"IMPLEMENTA\u00C7\u00C3O\", \"CORRE\u00C7\u00C3O\"].indexOf(e.name) <= -1)\n\n    if (factorSearch(e, \"IMPLEMENTA\u00C7\u00C3O\")) {\n      e = formatData(e, labels)\n      if (e.show) {\n         if (e.dueComplete) {\n           group[0].data.finish.push(e)\n         } else if (e.start) {\n           group[0].data.process.push(e)\n         }\n        \n      }\n    } else if (factorSearch(e, \"CORRE\u00C7\u00C3O\")) {\n      e = formatData(e, labels)\n\n      if (e.show) {\n        if (e.dueComplete) {\n          group[1].data.finish.push(e)\n        } else if (e.start) {\n          group[1].data.process.push(e)\n        }\n        \n      }\n    }\n  })\n\n  group[0].data.process = group[0].data.process?.sort((a, b) => {\n    return a.priorityOrder - b.priorityOrder\n  })\n  group[1].data.process = group[1].data.process?.sort((a, b) => {\n    return a.priorityOrder - b.priorityOrder\n  })\n  group[0].data.finish = group[0].data.finish?.sort((a, b) => {\n    return a.priorityOrder - b.priorityOrder\n  })\n  group[1].data.finish = group[1].data.finish?.sort((a, b) => {\n    return a.priorityOrder - b.priorityOrder\n  })\n\n  const currentDate = new Date()\n  const nextMonth = new Date(currentDate.setMonth(currentDate.getMonth() + 1))\n\n  const currentMontFormatted = new Intl.DateTimeFormat(\"pt-BR\", {\n    month: \"long\",\n  }).format(new Date())\n\n  const nextMonthFormatted = new Intl.DateTimeFormat(\"pt-BR\", {\n    month: \"long\",\n  }).format(nextMonth)\n\n  return { data: group, currentMontFormatted, nextMonthFormatted }\n}\n\nexport default function Index() {\n  let { data, currentMontFormatted, nextMonthFormatted } = useLoaderData()\n\n  return (\n    <div\n      style={{\n        flexDirection: \"row\",\n        display: \"flex\",\n        height: \"100%\",\n      }}\n    >\n      <LeftNavbar />\n      <Box\n        flexDirection=\"column\"\n        style={{\n          padding: \"30px\",\n          marginLeft: \"80px\",\n        }}\n      >\n        <Title\n          style={{\n            marginBottom: \"24px\",\n          }}\n          title={\n            <>\n              Backlog Desenvolvimento\n              <span style={{ color: \"#EBEBED\" }}> \u2022 </span>\n              <span\n                style={{\n                  color: \"#7F7EFF\",\n                  textTransform: \"uppercase\",\n                }}\n              >\n                {currentMontFormatted}/{nextMonthFormatted}\n              </span>\n            </>\n          }\n        ></Title>\n        <Box flexDirection=\"row\">\n          {data?.map((e) => {\n            return (\n              <ColumnCards\n                data={e}\n                key={Math.random()}\n                style={{\n                  marginRight: \"30px\",\n                  alignSelf: \"baseline\",\n                }}\n              />\n            )\n          })}\n        </Box>\n      </Box>\n    </div>\n  )\n}\n", "import { useEffect, useMemo, useRef } from \"react\"\nimport BaseImage from \"../BaseKit/BaseImage/BaseImage\"\nimport BaseText from \"../BaseKit/BaseText/BaseText\"\nimport Box from \"../BaseKit/Box/Box\"\nimport Divider from \"../BaseKit/Divider/Divider\"\nimport Icon from \"../BaseKit/Icon/Icon\"\nimport ModalPortal from \"../Modal/ModalPortal\"\nimport Gantt from \"frappe-gantt/dist/frappe-gantt\"\nconsole.log(Gantt)\nimport GanttStyles from \"frappe-gantt/dist/frappe-gantt.css\"\nimport s from \"./styles.css\"\n\nexport const links = [\n  { rel: \"stylesheet\", href: s },\n  {\n    rel: \"stylesheet\",\n    href: GanttStyles,\n  },\n]\n\nexport const Card = ({ data }) => {\n  const tasks = useRef(null)\n\n  useEffect(() => {\n    if (tasks?.current) {\n      var gantt = new Gantt(\n        tasks?.current,\n        [\n          {\n            id: \"Task 1\",\n            name: \"Redesign website\",\n            start: \"2016-12-28\",\n            end: \"2016-12-31\",\n            progress: 20,\n            dependencies: \"Task 2, Task 3\",\n            custom_class: \"bar-milestone\",\n          },\n        ],\n        {\n          header_height: 50,\n          column_width: 30,\n          step: 24,\n          view_modes: [\"Quarter Day\", \"Half Day\", \"Day\", \"Week\", \"Month\"],\n          bar_height: 20,\n          bar_corner_radius: 3,\n          arrow_curve: 5,\n          padding: 18,\n          view_mode: \"Day\",\n          date_format: \"YYYY-MM-DD\",\n          custom_popup_html: null,\n        },\n      )\n    }\n  }, [])\n\n  const labels = useMemo(() => {\n    return data?.labels?.map((e, k) => {\n      let color = e.color.toLowerCase()\n      return (\n        <Box\n          className={\"typetask\"}\n          justifyContent=\"center\"\n          flexDirection=\"row\"\n          key={Math.random()}\n          style={{\n            backgroundColor: color == \"sky\" ? \"cornflowerblue\" : `${color}`,\n          }}\n        >\n          <BaseText className={\"typetask_inovao\"} type=\"span\" title={e.name}></BaseText>\n        </Box>\n      )\n    })\n  }, [])\n\n  return (\n    <Box className={\"card\"} flexDirection=\"row\">\n      <Box className={\"card_infocard\"} alignItems=\"center\" flexDirection=\"column\">\n        <Box className={\"card_header\"} flexDirection=\"column\">\n          <Box className={\"card_tags\"} flexDirection=\"row\" alignItems=\"center\" justifyContent=\"center\">\n            <Box flexDirection=\"row\" flex={1} alignItems=\"center\">\n              {labels}\n            </Box>\n            <Box flexDirection=\"row\">\n              {data?.members.map((e, k) => {\n                return (\n                  <span\n                    style={{\n                      width: \"18px\",\n                      height: \"18px\",\n                      borderRadius: \"100px\",\n                      marginRight: \"5px\",\n                      overflow: \"hidden\",\n                    }}\n                    key={Math.random()}\n                    data-tip={e.name}\n                  >\n                    <BaseImage src={e.avatar} width=\"18px\" height=\"18px\" />\n                  </span>\n                )\n              })}\n            </Box>\n          </Box>\n\n          <BaseText\n            className={\"card_reconstruoregistrocorreodeponto\"}\n            type=\"span\"\n            title={data?.name}\n          ></BaseText>\n        </Box>\n\n        <Box className={\"card_info\"} alignItems=\"center\" flexDirection=\"row\">\n          <Box className={\"card_deadline\"} alignItems=\"center\" flexDirection=\"row\">\n            <Icon name=\"icon-icon_calendar1\" />\n            <span data-tip={\"Previs\u00E3o\"}>\n              <BaseText className={\"card_\"} type=\"span\" title={data?.dateDeadLine}></BaseText>\n            </span>\n          </Box>\n\n          <Box className={\"card_priority\"} alignItems=\"center\" flexDirection=\"row\">\n            <Icon name=\"icon-icon_alert\" />\n\n            <BaseText\n              className={\"card_baixa\"}\n              type=\"span\"\n              title={data?.priority || \"N\u00E3o Informado\"}\n            ></BaseText>\n          </Box>\n\n          <a href={data?.url} className={\"card_trello\"} target=\"_blank\">\n            <Icon name=\"icon-icon_trello\" />\n\n            <BaseText className={\"card_cardtrello\"} type=\"span\" title={\"Card Trello\"}></BaseText>\n          </a>\n        </Box>\n      </Box>\n      <ModalPortal\n        isOpen={true}\n        onRequestClose={() => {\n          setOpenAccount(false)\n        }}\n        style={{\n          padding: \"0px\",\n        }}\n      >\n        <div ref={tasks}></div>\n      </ModalPortal>\n    </Box>\n  )\n}\n\nexport const ColumnCards = ({ data, style }) => {\n  const dataFiltered = useMemo(() => {\n    let finish = []\n    let process = []\n    process = data?.data?.process?.map((e) => {\n      return <Card data={e} key={e.id}></Card>\n    })\n    finish = data?.data?.finish?.map((e) => {\n      return <Card data={e} key={e.id}></Card>\n    })\n\n    return { finish, process }\n  }, [data])\n  return (\n    <Box className={\"inovation\"} style={style} flexDirection=\"column\">\n      <Box className={\"inovation_headerlist\"} flexDirection=\"row\">\n        <Box\n          className={\"inovation_title\"}\n          style={{\n            width: \"100%\",\n          }}\n          flexDirection=\"row\"\n        >\n          <BaseText className={\"inovation_inovao\"} type=\"span\" title={data?.emoji}></BaseText>\n\n          <BaseText className={\"inovation_inovao\"} type=\"span\" title={data?.title}></BaseText>\n        </Box>\n\n        <Box className={\"inovation_number\"} flexDirection=\"row\">\n          <BaseText\n            className={\"inovation_total\"}\n            type=\"span\"\n            title={data?.data?.finish?.length + data?.data?.process?.length}\n          ></BaseText>\n        </Box>\n      </Box>\n      <Divider type=\"h\" spaccing=\"0px\" style={{ backgroundColor: \"#EBEBED\" }}></Divider>\n\n      <Box className={\"inovation_ctn\"}>\n        <Box className={\"inovation_inprocess\"} flexDirection=\"column\">\n          <BaseText className={\"inovation_emprocesso\"} type=\"span\" title={\"EM PROCESSO\"}></BaseText>\n          <div>{dataFiltered?.process}</div>\n        </Box>\n\n        <Divider type=\"h\" spaccing=\"0px\" style={{ backgroundColor: \"#EBEBED\" }}></Divider>\n\n        <Box className={\"inovation_completed\"} flexDirection=\"column\">\n          <BaseText className={\"inovation_concluidos\"} type=\"span\" title={\"CONCLUIDOS\"}></BaseText>\n          <div>{dataFiltered?.finish}</div>\n        </Box>\n      </Box>\n    </Box>\n  )\n}\n", "import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst BaseText = ({\n  title,\n  children,\n  style,\n  className,\n  onClick,\n  type,\n  aria,\n  target,\n  href,\n}) => {\n  const CustomTag = `${type}`;\n  const hrefProp = type == 'a' ? { href, target } : null;\n  return (\n    <CustomTag\n      className={`${className || ''}`}\n      style={style}\n      title={aria}\n      {...hrefProp}\n      onClick={() => {\n        if (onClick) onClick();\n      }}\n    >\n      {title || children}\n    </CustomTag>\n  );\n};\n\nBaseText.propTypes = {\n  title: PropTypes.any,\n  aria: PropTypes.string,\n  children: PropTypes.node,\n  type: PropTypes.string,\n  style: PropTypes.object,\n};\n\nexport default BaseText;\n", "import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst Divider = ({ type, spaccing, variant, style, size = 1 }) => {\n\n  let dotted = {};\n\n  dotted =\n    variant == 'dotted'\n      ? {\n          backgroundimage: `-webkit-linear-gradient(right, rgba(255,255,255,1) 0%, rgba(255,255,255,1) 50%, rgba(255,255,255,0) 51%,rgba(255,255,255,0) 100%),\n                            -webkit-linear-gradient(bottom, rgba(128,128,128,1) 0%, rgba(128,128,128,0) 8%, rgba(128,128,128,0) 100%)`,\n          backgroundSize: '12px 24px',\n        }\n      : {};\n\n  return (\n    <div\n      style={{\n        margin: type == 'h' ? `${spaccing} 0px` : `0px ${spaccing}`,\n        minWidth: type == 'h' ? `100%` : `${size}px`,\n        minHeight: type == 'h' ? `${size}px` : `100%`,\n        ...dotted,\n        ...style,\n      }}\n    />\n  );\n};\n\nDivider.defaultProps = {\n  variant: 'solid',\n};\n\nDivider.propTypes = {\n  type: PropTypes.string,\n  spaccing: PropTypes.string,\n  variant: PropTypes.string,\n};\n\nexport default Divider;\n", "\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport style from './Icon.css';\n\nconst Icon = ({ style, name, className=\"\", onClick }) => {\n  return (\n    <i\n      className={`icon ${name} ${className||''}`}\n      onClick={e => {\n        if (onClick) {\n          onClick(e);\n        }\n      }}\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        ...style,\n      }}\n    />\n  );\n};\n\nIcon.propTypes = {\n  name: PropTypes.string,\n  className: PropTypes.string,\n  style: PropTypes.object,\n};\n\nexport default Icon;\n", "import { default as React, useEffect, useRef } from \"react\"\nimport { animated, useTransition } from \"react-spring\"\nimport { createUniversalPortal } from \"../utils/portal\"\nconst Modal = ({\n  isOpen,\n  onRequestClose,\n  children,\n  style,\n  styleInner,\n  inline,\n  color,\n  title,\n  icon,\n  center,\n  styleBg,\n  header,\n}) => {\n  const content = useRef(null)\n\n  useEffect(() => {\n    if (isOpen) {\n      focusContent()\n    }\n  }, [isOpen])\n\n  const focusContent = () => {\n    content.current && content.current.focus()\n  }\n\n  const requestClose = (event) => {\n    onRequestClose && onRequestClose(event)\n  }\n\n  const transition = useTransition(isOpen, {\n    from: {\n      opacity: 0,\n      transform: center ? \"translateY(20px)\" : \"translate(0%, -34%)\",\n    },\n    enter: {\n      opacity: 1,\n      transform: center ? \"translateY(0px)\" : \"translate(0%, -50%)\",\n    },\n    leave: {\n      opacity: 0,\n      transform: center ? \"translateY(-20px)\" : \"translate(0%, -34%)\",\n    },\n  })\n\n  return transition(\n    (props, item) =>\n      item && (\n        <animated.div\n          onClick={requestClose}\n          style={{\n            ...props,\n            ...styleBg,\n          }}\n        >\n          {children}\n        </animated.div>\n      ),\n  )\n}\n\nclass ModalPortal extends React.Component {\n  render() {\n    return createUniversalPortal(<Modal {...this.props} />, \"body\")\n  }\n}\n\nexport default ModalPortal\n", "import ReactDOM from \"react-dom\"\n\nexport function canUseDOM() {\n  return !!(typeof window !== \"undefined\" && window.document && window.document.createElement)\n}\n\nexport function createUniversalPortal(children, selector) {\n  if (!canUseDOM()) {\n    return null\n  }\n  return ReactDOM.createPortal(children, document.querySelector(selector))\n}\n", "import logo from \"../../../assets/images/logo.svg\";\nimport BaseImage from \"../../BaseKit/BaseImage/BaseImage\";\nimport Box from \"../../BaseKit/Box/Box\";\nimport Divider from \"../../BaseKit/Divider/Divider\";\nimport { LinkNavigation, links as LinkNavigationStyles } from \"../LinkNavigation/LinkNavigation\";\nimport s from \"./styles.css\";\nexport const links = [\n  { rel: \"stylesheet\", href: s },\n  \n  ...LinkNavigationStyles,\n];\n\nexport const LeftNavbar = ({ props }) => {\n  return (\n    <Box\n      className={\"leftnavbar\"}\n\n      flexDirection=\"row\"\n      position=\"fixed\"\n    >\n      <Box\n        className={\"leftnavbar_ctn\"}\n        flex=\"1\"\n        alignItems=\"center\"\n        flexDirection=\"column\"\n      >\n        <Box\n          className={\"leftnavbar_ctn_nav\"}\n          flex=\"1\"\n          flexDirection=\"column\"\n        > \n\n          <BaseImage width=\"30px\" height=\"30px\" src={logo} style={{\n            minWidth:\"30px\",minHeight:\"30px\"}}/>\n          <Box\n            className={\"leftnavbar_ctn_links\"}\n            flex=\"1\"    \n              flexDirection=\"column\"\n          >\n            <LinkNavigation icon=\"icon-icon_code\"/>\n          </Box>\n        </Box>\n\n        {/* // <Icon  className={\"leftnavbar_icon_logout\"} /> */}\n      </Box>\n\n      <Divider\n        type=\"v\"\n        spaccing=\"0px\"\n        style={{ backgroundColor: \"#EBEBED\" }}\n      ></Divider>\n    </Box>\n  );\n};\n\nexport default LeftNavbar;", "import { Link } from \"remix\";\nimport Box from \"~/components/BaseKit/Box/Box\"\nimport Icon from \"~/components/BaseKit/Icon/Icon\"\nimport s from \"./styles.css\";\n\nexport const links = [{ rel: \"stylesheet\", href: s }];\n\nexport const LinkNavigation=({icon})=>{\n\n            \n\n            \n return (\n   <Link className={\"link_navbar\"} to=\"/\">\n     <Icon name={icon} />\n   </Link>\n );\n            \n}"],
  "mappings": "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",
  "names": []
}
